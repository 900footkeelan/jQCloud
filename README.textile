h1. jQCloud: beautiful word clouds with jQuery

jQCloud is a jQuery plugin that builds neat and pure HTML + CSS word clouds that are actually shaped like a cloud (otherwise, why would we call them 'word clouds'?).

h2. Installation

Installing jQCloud is extremely simple:

# Make sure that you have the jQuery library and that you imported its .js file in your HTML code.
# Download the jQCloud files. Place jqcloud-0.1.1.js (or the minified version jqcloud-0.1.1.min.js) and jqcloud.css somewhere in your project and import both of them in your HTML code.
# You can easily substitute jqcloud.css with a custom CSS stylesheet following the guidelines explained later.

h2. Usage

Once you imported the .js an .css files, drawing a cloud is as simple as this:

bc. <!doctype html>
<html>
  <head>
    <title>jQCloud Example</title>
    <link rel="stylesheet" type="text/css" href="jqcloud.css" />
    <script type="text/javascript" src="jquery.min.js"></script>
    <script type="text/javascript" src="jqcloud-0.1.1.js"></script>
    <script type="text/javascript">
      /*!
       * Create an array of word objects to be passed to jQCloud, specifying for each word in the cloud the following attributes:
       *
       * text: [mandatory] string containing the word(s)
       * weight: [mandatory] number (integer or float) defining the relative importance of the word
       *         (such as the number of occurrencies, etc.). The range of values is arbitrary, as they will
       *         be linearly mapped to a discrete scale from 1 to 10.
       * url: [optional] a URL to which the word must be linked. It will be used as the href attribute of an HTML anchor.
       */
      var word_list = new Array(
          {text: "Lorem", weight: 15},
          {text: "Ipsum", weight: 9, url: "http://jquery.com/"},
          {text: "Dolor", weight: 6},
          {text: "Sit", weight: 7},
          {text: "Amet", weight: 5}
          // ...other words
      );
      $(document).ready(function() {
        // Call jQCloud on a jQuery object passing the word list as argument. Chainability of methods is maintained.
        $("#wordcloud").jQCloud(word_list);
      });
    </script>
  </head>
  <body>
    <div id="wordcloud" style="width: 500px; height: 300px; position: relative;"></div>
  </body>
</html>

h2. Custom CSS guidelines

Since the word cloud produced by jQCloud is made of pure HTML, you can style it at will using CSS. The included CSS file jqcloud.css is intended as an example and as a base on which to develop your custom style, defining dimensions and appearance of words in the cloud. When writing your custom CSS, just follow these guidelines:

* Always specify the dimensions of the container element.
* The CSS attribute 'position' of the container element must be explicitly declared and different from 'static'.
* Specifying the style of the words (color, font, dimension, etc.) is super easy: words will be wrapped in @<span>@ tags with ten levels of importance corresponding to the following classes (in descending order of importance): w10, w9, w8, w7, w6, w5, w4, w3, w2, w1. 

h2. Examples

Just have a look at the examples directory provided in the project, it should be rather self explanatory. If you happen to use jQCloud in your projects, you can make me know (for example contact me on "my website":http://www.lucaongaro.eu) and I can link your website in a 'gallery' section, so that other people can take inspiration from it.

h2. Changelog

Just started this tiny project...
